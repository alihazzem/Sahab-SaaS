// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Media {
  id             String        @id @default(cuid())
  userId         String // Clerk user ID
  type           String // "video" | "image"
  title          String?
  description    String?
  publicId       String // Cloudinary public ID
  url            String // original upload
  versions       Json? // store multiple resolutions as JSON (1080p, 720p, 480p)
  originalSize   Int
  compressedSize Int?
  duration       Int? // seconds, only for videos
  width          Int? // only for images
  height         Int? // only for images
  tags           String[]      @default([])
  optimized      Boolean       @default(false)
  sharedLinks    SharedMedia[] // Relation to shared links
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Plan {
  id                   String         @id @default(cuid())
  name                 String         @unique
  price                Int // stored in piastres (EGP * 100)
  currency             String         @default("EGP")
  storageLimit         Int // MB
  maxUploadSize        Int // MB
  transformationsLimit Int
  teamMembers          Int
  supportLevel         String
  subscriptions        Subscription[]
  payments             Payment[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String             @unique // Clerk user ID
  planId    String
  plan      Plan               @relation(fields: [planId], references: [id])
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  userId        String // Clerk user ID
  planId        String
  plan          Plan          @relation(fields: [planId], references: [id])
  amount        Int // in piastres
  currency      String        @default("EGP")
  status        PaymentStatus
  provider      String // "paymob"
  providerTxnId String? // Paymob transaction ID
  metadata      Json? // store Paymob response data
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model UsageTracking {
  id                  String   @id @default(cuid())
  userId              String // Clerk user ID
  storageUsed         Int      @default(0) // MB
  transformationsUsed Int      @default(0)
  uploadsCount        Int      @default(0)
  month               Int // 1-12
  year                Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([userId, month, year])
}

model Admin {
  id        String    @id @default(cuid())
  userId    String    @unique // Clerk user ID
  email     String    @unique // User email for easy identification
  role      AdminRole @default(ADMIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String? // Admin who granted this role
}

model TeamMember {
  id             String       @id @default(cuid())
  userId         String?      @unique // Clerk user ID of team member (null for pending invitations)
  email          String // Team member email
  teamOwnerId    String // Clerk user ID of the plan owner (admin)
  role           TeamRole     @default(MEMBER)
  permissions    String[]     @default([]) // Array of permissions
  invitedAt      DateTime     @default(now())
  acceptedAt     DateTime? // When they accepted the invitation
  status         InviteStatus @default(PENDING)
  inviteToken    String?      @unique // Unique token for invitation link
  tokenExpiresAt DateTime? // When the invitation token expires
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([teamOwnerId])
  @@index([inviteToken])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  MEMBER
  MANAGER
  ADMIN
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model Notification {
  id          String           @id @default(cuid())
  userId      String // Clerk user ID
  type        NotificationType
  title       String
  message     String
  actionUrl   String? // Optional URL to navigate to when clicked
  actionLabel String? // Optional label for action button
  metadata    Json? // Additional data (e.g., team invite details, usage stats)
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId])
  @@index([userId, isRead])
}

enum NotificationType {
  TEAM_INVITATION
  USAGE_WARNING
  USAGE_CRITICAL
  USAGE_EXCEEDED
  UPLOAD_SUCCESS
  UPLOAD_FAILED
  PLAN_UPGRADE_SUGGESTION
  TEAM_MEMBER_JOINED
  TEAM_MEMBER_LEFT
  SUBSCRIPTION_EXPIRING
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SYSTEM_ANNOUNCEMENT
}

model SharedMedia {
  id          String    @id @default(cuid())
  mediaId     String
  media       Media     @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  userId      String // Owner's Clerk user ID
  shareToken  String    @unique // Public token for sharing
  title       String? // Optional custom title for shared link
  description String? // Optional description
  views       Int       @default(0)
  expiresAt   DateTime? // Optional expiration date
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shareToken])
  @@index([userId])
  @@index([mediaId])
}
